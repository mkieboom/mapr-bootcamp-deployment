{"paragraphs":[{"text":"%md\nThe following sections loads a CSV file containing ariport information and transforms it into a dataframe which can be queried using sql. Some operations have been commented but can be enabled to see what happens. ","dateUpdated":"2017-02-08T09:46:29+0100","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486543570922_-265833757","id":"20160422-085839_1825994819","dateCreated":"2017-02-08T09:46:10+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1943","user":"anonymous","dateFinished":"2017-02-08T09:46:32+0100","dateStarted":"2017-02-08T09:46:29+0100","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>The following sections loads a CSV file containing ariport information and transforms it into a dataframe which can be queried using sql. Some operations have been commented but can be enabled to see what happens.</p>\n</div>"}]}},{"text":"case class Airport(name:String, city:String, country:String, code :String, ICAO : String, lat:Double, lan:Double, altitude : Float,\nutc_offset : Float, DST : String, timezone : String)\n\nval airports = sc.textFile(\"/mapr/training.mapr.com/data/lab2_dataset/airports.csv\")\n    .map(_.replaceAll(\"\\\"\",\"\"))\n    .map(_.split(\",\"))\n    .map(a => Airport(a(1), a(2), a(3), a(4), a(5), a(6).toDouble ,a(7).toDouble, a(8).toFloat, a(9).toFloat, a(10), a(11)))\n//    .map(airport => airport.copy(altitude = airport.altitude/3.2808399f)) // change altitude to feet instead of meters\n//    .filter(_.country == \"Netherlands\") // only keep airports in the Netherlands\n//    .cache // cache this result so that it does not have to be recalculated later on\nprintln(\"total number of airports in data: \"+airports.count)\n\nval airportsDF = airports.toDF // create dataframe from RDD (enabling SQL functions on it)\nairportsDF.show // show top 20 rows\nairportsDF.registerTempTable(\"airports\") // register the dataframe so it can be referenced from the SQL contex\nsqlContext.sql(\"SELECT * FROM airports WHERE country='United States' OR country='Virgin Islands' OR country='Puerto Rico'\").registerTempTable(\"us_airports\")\n","dateUpdated":"2017-02-08T09:46:10+0100","config":{"tableHide":false,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"results":[{"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486543570940_-261986268","id":"20160422-085839_1136840383","dateCreated":"2017-02-08T09:46:10+0100","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1944"},{"text":"%md\nThe airport RDD is used to figure out the number of airports per country (could be done using sql as well). With some slight modifications it is also possible to figure out the number of airports per timezone and their average altitude...","dateUpdated":"2017-02-08T09:46:35+0100","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":{},"enabled":true,"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486543570941_-262371017","id":"20160422-085839_967685739","dateCreated":"2017-02-08T09:46:10+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1945","user":"anonymous","dateFinished":"2017-02-08T09:46:35+0100","dateStarted":"2017-02-08T09:46:35+0100","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>The airport RDD is used to figure out the number of airports per country (could be done using sql as well). With some slight modifications it is also possible to figure out the number of airports per timezone and their average altitude&hellip;</p>\n</div>"}]}},{"text":"val airportsPerCountry = airports\n    .coalesce(1) // repartition into one partition\n    .map(airport => (airport.country, 1)) // create tuple with country as key and 1 for each airport\n    .reduceByKey(_+_, 2) // shuffle data into two partitions\n    .map(tuple => (tuple._2, tuple._1))\n    .sortByKey(false, 4) // sort data on key (desc) into 4 paritions\n\n\nprintln(\"Number of partitions: \"+airportsPerCountry.partitions.size) // show the number of partitions\nairportsPerCountry.take(10).foreach(println) // prints top 10 countries by number of airports","dateUpdated":"2017-02-08T09:46:10+0100","config":{"tableHide":false,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"results":{},"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486543570942_-261216770","id":"20160422-085839_590701372","dateCreated":"2017-02-08T09:46:10+0100","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1946"},{"text":"%md\nSome nice SQL on the registered airports table. Try other queries and visualisations!","dateUpdated":"2017-02-08T09:46:37+0100","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":{},"enabled":true,"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486543570942_-261216770","id":"20160422-085839_1080767346","dateCreated":"2017-02-08T09:46:10+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1947","user":"anonymous","dateFinished":"2017-02-08T09:46:38+0100","dateStarted":"2017-02-08T09:46:38+0100","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Some nice SQL on the registered airports table. Try other queries and visualisations!</p>\n</div>"}]}},{"text":"%sql\nselect country, count(1) cnt, avg(altitude) avg_alt from airports group by country having avg_alt > ${minAltitude=1000} order by avg_alt desc","dateUpdated":"2017-02-08T09:46:10+0100","config":{"lineNumbers":false,"tableHide":false,"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","colWidth":12,"editorHide":false,"results":{},"graph":{"keys":[{"index":0,"name":"country","aggr":"sum"}],"optionOpen":false,"height":300,"lineWithFocus":false,"values":[{"index":2,"name":"avg_alt","aggr":"sum"}],"mode":"multiBarChart","groups":[],"scatter":{"xAxis":{"index":0,"name":"country","aggr":"sum"}}},"enabled":true},"settings":{"params":{"minAltitude":"1000","minCount":"100000","minAltitudeM":"500"},"forms":{"minAltitude":{"name":"minAltitude","defaultValue":"1000","hidden":false,"$$hashKey":"object:2343"}}},"apps":[],"jobName":"paragraph_1486543570943_-261601519","id":"20160422-085839_361343734","dateCreated":"2017-02-08T09:46:10+0100","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1948"},{"text":"%md\nThe following block reads a Parquet file containing all the flights within the United States in 2008 and registers it with the SQLContext","dateUpdated":"2017-02-08T09:46:41+0100","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":{},"enabled":true,"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486543570943_-261601519","id":"20160422-085839_1094928578","dateCreated":"2017-02-08T09:46:10+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1949","user":"anonymous","dateFinished":"2017-02-08T09:46:41+0100","dateStarted":"2017-02-08T09:46:41+0100","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>The following block reads a Parquet file containing all the flights within the United States in 2008 and registers it with the SQLContext</p>\n</div>"}]}},{"text":"val flights_large = sqlContext.read.parquet(\"/mapr/training.mapr.com/data/lab2_dataset/flights_2008_sample.parquet\") // read parquet file\nval toBool = udf[Boolean, Int](_ == 1) // define a 'user defined function' converting integer value to boolean\n\nval flights = flights_large.select(\"Month\", \"DayofMonth\", \"DayOfWeek\",\"DepTime\",\"ArrTime\",\"UniqueCarrier\",\"FlightNum\",\"ActualElapsedTime\", \"ArrDelay\", \"DepDelay\", \"Origin\", \"Dest\", \"Distance\", \"Cancelled\").withColumn(\"Cancelled\", toBool(flights_large(\"Cancelled\"))) // select a number of columns and use the UDF to convert the 'cancelled' column from int to boolean\n\nflights.registerTempTable(\"flights\")\nflights.show\nprint(\"Number of flights: \"+flights.count)","dateUpdated":"2017-02-08T09:46:10+0100","config":{"tableHide":false,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"results":{},"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486543570944_1004607111","id":"20160422-085839_1231548245","dateCreated":"2017-02-08T09:46:10+0100","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1950"},{"text":"%md \nTry out some queries yourself. It is possible to change the scrips above, re-run them and change the outcome of your queries.","dateUpdated":"2017-02-08T09:46:43+0100","config":{"tableHide":false,"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":{},"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486543570944_1004607111","id":"20160422-085839_1343141288","dateCreated":"2017-02-08T09:46:10+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1951","user":"anonymous","dateFinished":"2017-02-08T09:46:43+0100","dateStarted":"2017-02-08T09:46:43+0100","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Try out some queries yourself. It is possible to change the scrips above, re-run them and change the outcome of your queries.</p>\n</div>"}]}},{"text":"%sql\nselect UniqueCarrier, avg(DepDelay) as avg_dep, avg(ArrDelay) as avg_arr, count(1) as count \nfrom flights, us_airports \nwhere flights.Origin = us_airports.code \ngroup by UniqueCarrier ","dateUpdated":"2017-02-08T09:46:10+0100","config":{"tableHide":false,"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","colWidth":12,"editorHide":false,"results":{},"graph":{"keys":[{"index":0,"name":"UniqueCarrier","aggr":"sum"}],"optionOpen":true,"height":300,"values":[{"index":1,"name":"avg_dep","aggr":"sum"}],"mode":"scatterChart","groups":[],"scatter":{"yAxis":{"index":2,"name":"avg_arr","aggr":"sum"},"group":{"index":0,"name":"UniqueCarrier","aggr":"sum"},"xAxis":{"index":1,"name":"avg_dep","aggr":"sum"},"size":{"index":3,"name":"count","aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486543570944_1004607111","id":"20160422-085839_134769477","dateCreated":"2017-02-08T09:46:10+0100","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1952"},{"dateUpdated":"2017-02-08T09:46:10+0100","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"results":{},"enabled":true,"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486543570945_1004222362","id":"20160422-085839_1398159326","dateCreated":"2017-02-08T09:46:10+0100","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1953"}],"name":"Lab2 - ETL & Dataframes","id":"2C8DPAE7U","angularObjects":{"2C7PJ76G4:shared_process":[],"2CAKWEBCP:shared_process":[],"2CAJAE8FS:shared_process":[],"2C9SC22ZA:shared_process":[],"2C7E3YURT:shared_process":[],"2C9QEFEVM:shared_process":[],"2CB9E937H:shared_process":[],"2C89F1UUR:shared_process":[],"2CAG461GR:shared_process":[],"2C8WQGZ95:shared_process":[],"2C91QSZPZ:shared_process":[],"2CAQS2NZ9:shared_process":[],"2CA9R2P6W:shared_process":[],"2C97ZPDRJ:shared_process":[],"2CAKDRNUP:shared_process":[],"2C8R5WJKF:shared_process":[],"2C9DB7ZX9:shared_process":[],"2CAW7T5ZV:shared_process":[],"2C9KSWREA:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}
